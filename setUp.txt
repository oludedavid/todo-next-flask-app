Step 1: create a folder and inside the folder create two folder called server and client
#server: would contain all the backend functionalities
#client: would contain all the frontend functionalities

Step 2a: Setting up the Server

#cd into the server folder from the terminal
cd server

#create and activate a virtual environment
create: python3 -m venv venv
activate: source venv/bin/activate


Step 2b: Create a server file where we are going to write all our Flask code inside
 touch server.py

Step 2c: Install Flask
 pip3 install flask 

Step 3: Setting up the client
#cd into the client folder and create a next app
cd -
cd client
npx create-next-app client-app

Step 4: configure the backend flask (create Apis)
#inside the server file 
-Import the necessary libraries
from flask import Flask, jsonify

-create a flask app instance
app = Flask(_name_)

-we need a way to run our app using the following

if_name_ == "_main_":
   app.run(debug=True)

Step 5: Rub the server 
 python3 server.py

 Then open the Running on http://127.0.0.1:8080/api/home
you should see the return jsonify

#Client side
We need to fetch the data from the flask backend

Step 1: Go intot the server file and install CORS, what it allows us to do is to make request from the client server to the backend server
if we dont do this we would have a CROSS ORIGIN ISSUE

pip3 install flask-cors

//After installing flask-cors we would then import it 
from flask_cors import CORS
//wrap our flask app instance inside the cors
CORS(app)

GET request
//To fetch data or retrieve it make a GET request

POST request
//To create a new data, make a POST request

Step 2
- Install Axios a library that makes it easier to fetch and post data
npm install Axios

//Import Axios

import axios from 'axios'

//now import the useEffect hook with is a hook that is majorly used for side effects like fetch data, DOM manipulation, subscription effects
//Also import useState which is a hook used for monitoring the state of a any changing variable or state that will change
 Step 3:
 # store the url inside a consatant variable
 const baseURL = "http://127.0.0.1:8080/api/home";

 #create a state variable called data
   const [data, setData] = useState();

#fetch data using axios and useEffect
  useEffect(() => {
    axios.get(baseURL).then((response) => {
      setData(response.data);
    });
  }, []);

The whole set should look like this
import { useEffect, useState } from "react";
import axios from "axios";

const baseURL = "http://127.0.0.1:8080/api/home";

export default function HomePage() {
  const [data, setData] = useState();

  useEffect(() => {
    axios.get(baseURL).then((response) => {
      setData(response.data);
    });
  }, []);
  if (!data) return null;

  return <div>{data["message"]}</div>;
}

/...............In summary..................../
# Create project structure
mkdir my_project
cd my_project
mkdir server client

# Navigate to the server folder
cd server

# Create and activate a virtual environment
python3 -m venv venv
source venv/bin/activate

# Create a server file
touch server.py

# Install Flask
pip3 install flask

# Navigate to the client folder and create a new Next.js app
cd -
cd client
npx create-next-app client-app

# Navigate back to the server folder
cd -
cd server

# Install Flask-CORS
pip3 install flask-cors

# Open the server file and write the Flask code
nano server.py  # or use your preferred text editor

# In server.py, write the following Flask code
from flask import Flask, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

@app.route("/api/home", methods=['GET'])
def return_home():
    return jsonify({
        'message': "Hello World"
    })

if __name__ == "__main__":
    app.run(debug=True)

# Save and close the file (if using nano, press Ctrl+X, then Y, then Enter)

# Run the Flask server
python3 server.py


.......Working with databases............
Step 1
//We would like to intereact with the database using flask sql_alchemy as our communicator to talk with mysql workbench
#Install flask sql_alchemy to our server
pip3 install flask-sqlalchemy
//use the command below to know the libraries that have been added
pip3 freeze
//now make sure ur server is running again
python3 server.py
// Install the datetime or import it in order for us to keep track of when things was added
from datetime import datetime



Step 2: Create a new connection in mysql workbench called todo
//Inside the connection create a new database called todo
//setup the URI (Universal Resource Indicator)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:password@localhost:3306/todo'
NOTE: For mysql connection use the pymysql, which is a Python MySQL client compatible with Flask-SQLAlchemy.
//pip install pymysql 
#NOTE : in mysql workbench schemas are also known as databases
Step 3: for example purpose we can now create a sample model using python classes
# Model definition with default values
class Todo(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    todo_item = db.Column(db.String(80), nullable=False)
    status = db.Column(db.Boolean, default=False, nullable=False)
Step 4: initialise the database
# Initialize the database
def initialize_database():
    with app.app_context():
        db.create_all()

run the application
# Run the application
if __name__ == "__main__":
    initialize_database()
    app.run(debug=True, port=8080)


    client_dockerFile

    FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi


# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Next.js collects completely anonymous telemetry data about general usage.
# Learn more here: https://nextjs.org/telemetry
# Uncomment the following line in case you want to disable telemetry during the build.
# ENV NEXT_TELEMETRY_DISABLED 1

# RUN yarn build

# If using npm comment out above and use below instead
 RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production
# Uncomment the following line in case you want to disable telemetry during runtime.
# ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
# set hostname to localhost
ENV HOSTNAME "0.0.0.0"

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]



server-docker file
# syntax=docker/dockerfile:1

# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Dockerfile reference guide at
# https://docs.docker.com/go/dockerfile-reference/

ARG PYTHON_VERSION=3.9.6
FROM python:${PYTHON_VERSION}-slim as base

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /server

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Switch to the non-privileged user to run the application.
USER appuser

# Copy the source code into the container.
COPY . .

ENV FLASK_APP=server.py

# Expose the port that the application listens on.
EXPOSE 8080

# Run the application.
CMD flask run
